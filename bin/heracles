#!/usr/bin/env node
// 
//        Copyright 2011-2012 Hydna AB. All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without 
//  modification, are permitted provided that the following conditions 
//  are met:
//
//    1. Redistributions of source code must retain the above copyright 
//       notice, this list of conditions and the following disclaimer.
//
//    2. Redistributions in binary form must reproduce the above copyright 
//       notice, this list of conditions and the following disclaimer in the 
//       documentation and/or other materials provided with the distribution.
//
//  THIS SOFTWARE IS PROVIDED BY HYDNA AB ``AS IS'' AND ANY EXPRESS OR IMPLIED
//  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
//  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
//  EVENT SHALL HYDNA AB OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
//  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
//  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
//  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
//  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//  The views and conclusions contained in the software and documentation are
//  those of the authors and should not be interpreted as representing 
//  official policies, either expressed or implied, of Hydna AB.
//

var cluster             = require("cluster");
var readFileSync        = require("fs").readFileSync;
var writeFileSync       = require("fs").writeFileSync;
var existsSync          = require("path").existsSync;
var resolve             = require("path").resolve;

var City                = require("geoip").City;

var createParser        = require("../lib/optparse").createParser;
var createDomains       = require("../lib/domain").createDomains;
var createSessions      = require("../lib/session").createSessions;
var createDispatcher    = require("../lib/dispatch").createDispatcher;

var log                 = require("../lib/log");

var ok                  = require("../lib/helpers").ok;
var notFound            = require("../lib/helpers").notFound;
var badRequest          = require("../lib/helpers").badRequest;
var file                = require("../lib/helpers").file;
var methodNotAllowed    = require("../lib/helpers").methodNotAllowed;


var BANNER              = "usage: heracles domains.json [options]";
var SWITCHES            = [
  ["-h", "--help",        "Show this help section"],
  ["-v", "--verbose",     "Verbose mode"],
  ["-d", "--debug",       "Debug mode"],
  [      "--silent",      "Silent mode"],
  [      "--version",     "Prints current version"],
  [      "--port=PORT",   "Server port"],
  [      "--rpcport=PORT","RPC Server port"],
  [      "--rpcsecret=PORT","RPC Sercret"],
  [      "--workers=NO",  "Defaults to total number of CPU's"],
  [      "--tracker=PATH","Path to tracker-js, defaults to 'public/tracker.js"],
  [      "--name=NAME",   "Name of server"],
  [      "--geodb=PATH",  "Path to MaxMind geo ip database"],
  [      "--id=ID",       "ID of server, if used in clusters"]
];

var DEFAULT_SERVER_NAME = "heracles/" + require("../package.json").version;

// Internal variables
var workers             = {};


// Internal constants
var VISIT_TIMEOUT       = 20 * 60000; // 20 min


process.title = "heracles";



function main () {
  var dispatcher;
  var sessions;
  var domainspath;
  var scriptpath;
  var lookupdb;
  var workers;
  var domains;
  var worker;
  var parser;
  var opts;
  var port;
  var rpcport;

  parser = createParser(SWITCHES, BANNER);
  opts = parser.parse(process.argv.slice(2));

  if (!(domainspath = parser.args[0]) || !existsSync(domainspath)) {
    console.error("expected -- domains.json");
    process.exit(1);
    return;
  }

  if (opts.help) {
    console.log(parser.help());
    process.exit(1);
    return;
  }

  if (opts.version) {
    console.log(require("../package.json").version);
    process.exit(1);
    return;
  }

  if ((!(port = parseInt(opts.port)) || isNaN(port))) {
    console.error("expected -- port");
    process.exit(1);
    return;
  }

  log.debugMode = "debug" in opts;
  log.silentMode = "silent" in opts;

  if (cluster.isMaster) {

    if ("rpcport" in opts) {

      if ((!(rpcport = parseInt(opts.rpcport)) || isNaN(rpcport))) {
        console.error("invalid rpcport");
        process.exit(1);
        return;
      }

      if ("rpcsecret" in opts == false) {
        throw new Error("Expected option 'rpcsecret' when RPC is enabled");
      }

      dispatcher = createDispatcher(opts.name || DEFAULT_SERVER_NAME);
      dispatcher.addHandler("/domains", sourceHandler(domainspath,
                                                      domains,
                                                      opts.rpcsecret));
      dispatcher.listen(rpcport);
    }


    workers = require("os").cpus().length;

    if ("workers" in opts) {
      workers = parseInt(opts.workers);
    }

    for (var i = 0; i < workers; i++) {
      worker = cluster.fork();
      workers[worker.pid] = worker;
    }

    cluster.on("death", function (target) {
      var worker;
      delete workers[target.id];
      worker = cluster.fork();
      workers[worker.pid] = worker;
    });


  } else {

    if ("geodb" in opts) {
      try {
        lookupdb = new City(resolve(opts.geodb));
      } catch (err) {
        lookupdb = new FakeLookupDB();
      }
    } else {
      lookupdb = new FakeLookupDB();
    }

    scriptpath = opts.tracker || resolve(__dirname, "../public/tracker.js");

    if (!opts.debug) {
      scriptpath = null;
    }

    domains = createDomains();
    domains.source(domainspath);

    sessions = createSessions(opts.id || "1", lookupdb);

    dispatcher = createDispatcher(opts.name || DEFAULT_SERVER_NAME);
    dispatcher.addHandler("/s", sessionHandler(domains, sessions));
    dispatcher.addHandler("/s/", sessionHandler(domains, sessions));
    dispatcher.addHandler("/t.js", scriptHandler(scriptpath));
    dispatcher.listen(port);

    process.on("message", function message(msg, handle) {
      switch (msg.cmd) {
        case "source":
          domains.source(true);
          break;
      }
    });
  }
}


function FakeLookupDB () {}

FakeLookupDB.prototype.lookup = function (addr, C) {
  process.nextTick(function () {
    return C(null, {
      latitude: 0,
      longitude: 0,
    });
  });
};


function scriptHandler (path, debug) {
  var trackerjs;
  var jsp;
  var pro;
  var content;
  var ast;

  if (!path) {
    return notFound;
  }

  content = readFileSync(path, "utf8");

  try {
    jsp = require("uglify-js").parser;
    pro = require("uglify-js").uglify;
  } catch (err) {
  }

  if (debug || !jsp) {
    trackerjs = new Buffer(content);
  } else {
    ast = jsp.parse(content);
    ast = pro.ast_mangle(ast);
    ast = pro.ast_squeeze(ast);
    trackerjs = new Buffer(pro.gen_code(ast));
  }

  return function (req, res) {
    return file(req, res, trackerjs, "text/javascript");
  };
}


function sessionHandler (domains, sessions) {

  return function (req, res) {
    var address = req.connection.remoteAddress;
    var referer = req.headers["referer"];
    var query = req.query;
    var session;
    var result;
    var domain;

    domain = domains.getDomain(referer, query._id);

    if (!domain) {
      return badRequest(req, res);
    }

    session = sessions.getSession(domain, req, query);

    if (!session) {
      return badRequest(req, res);
    }

    function endrequest() {
      if (query._a) {
        session.dispatch(referer, query._a || "");
      } else if (query._d == 1) {
        session.navigateFrom();
      } else {
        session.navigateTo(referer, query.r, query.t);
      }

      if (session.serversession) {
        session.updateTimestamp();
        res.setHeader("Set-Cookie", session.getCookieString());
      }

      return ok(req, res);
    }

    if (session.lastvisit == 0) {
      session.init(address, query.r || "", endrequest);
    } else if (session.lastvisit + VISIT_TIMEOUT < Date.now()) {
      session.heartbeat(address, query.r || "", endrequest);
    } else {
      endrequest();
    }
  };
}


function sourceHandler (path, domains, secret) {
  return function (req, res) {
    var buffer = [];

    if (req.method !== "POST") {
      return methodNotAllowed(req, res);
    }

    if (req.headers["x-token"] !== secret) {
      return badRequest(req, res);
    }

    req.on("data", function (chunk) {
      buffer.push(chunk.toString());
    });

    req.on("end", function () {
      var source = buffer.join("");

      try {
        JSON.parse(source);
        writeFileSync(path, source, "utf8")
      } catch (err) {
        console.error(err.stack);
        return badRequest(req, res);
      }

      for (var id in workers) {
        workers[id].send({ cmd: "source" });
      }

      return ok(req, res);
    });
  };
}


if (require.main == module) {
  main();
}